{"version":3,"sources":["Tower.js","hanoi.js","HanoiTowers.js","App.js","serviceWorker.js","index.js"],"names":["Tower","_ref","_ref$plates","plates","onClick","selected","react_default","a","createElement","className","concat","map","width","key","style","isSolved","state","nonemty","findIndex","x","length","every","tower","index","len","_","isEqual","rangeRight","move","mv","_mv","Object","slicedToArray","prev","next","inRange","isEmpty","last","nextState","forEach","push","toConsumableArray","pop","getInitialState","arguments","undefined","size","times","stubArray","HanoiTowers","towers","hanoi","moves","solved","reset","_this","setState","addPlate","popPlate","handleClick","i","_this$state","newTowers","_this2","this","_this$state2","Fragment","disabled","idx","src_Tower","React","Component","App","src_HanoiTowers","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.356e1665.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Tower({plates = [], onClick, selected}) {\n  return (\n    <div className={`Tower ${selected ? 'selected' : ''}`} onClick={onClick}>\n      {\n        plates.map(width => <div key={width} className=\"plate\" style={{width: width*20}} />)\n      }\n    </div>\n  );\n}\n\nexport default Tower;","/**\n * Contains all the logic of the tower of hanoi riddle\n */\n\nimport _ from 'lodash';\n\n/**\n * Returns true if the riddle is solved\n * @param {*} state - Array of arrays representing current state of the towers\n */\nconst isSolved = (state) => {\n  const nonemty = state.findIndex(x => x.length !== 0);\n  if (nonemty < 1) {\n    return false;\n  }\n  return state.every((tower, index) => {\n    const len = tower.length;\n    if (index !== nonemty) {\n      return len === 0;\n    }\n    return _.isEqual(tower, _.rangeRight(1, len+1));\n  });\n};\n\n/**\n * \n * @param {*} state - Array of arrays representing the state of a game\n * @param {*} mv - Array of two elements, [from, to] representing a move to perform\n */\nconst move = (state, mv) => {\n  const [prev, next] = mv;\n  const len = state.length;\n  if (!_.inRange(prev, len)   ||\n      !_.inRange(next, len)   ||\n      prev === next           ||\n      _.isEmpty(state[prev])  ||\n      (!_.isEmpty(state[next]) && _.last(state[prev]) > _.last(state[next]))\n    ) {\n        return state;\n      }\n  const nextState = [];\n  state.forEach(tower => nextState.push([...tower]));\n  nextState[next].push(nextState[prev].pop());\n  return nextState;\n};\n\nconst getInitialState = (plates=8, size=3) => {\n  return [\n    _.rangeRight(1, plates+1),\n    ..._.times(size-1, _.stubArray)\n  ];\n};\n\nexport {\n  isSolved,\n  move,\n  getInitialState,\n};","import React from 'react';\nimport Tower from './Tower';\nimport * as hanoi from './hanoi';\nimport _ from 'lodash';\n\nclass HanoiTowers extends React.Component {\n\n  state = {\n    plates: 4,\n    towers: hanoi.getInitialState(4, 3),\n    selected: null,\n    moves: 0,\n    solved: false,\n  };\n\n  reset = () => this.setState({\n    towers: hanoi.getInitialState(this.state.plates, 3),\n    selected: null,\n    moves: 0,\n    solved: false,\n  });\n\n  addPlate = () => {\n    const {plates} = this.state;\n    if (plates >= 8) return;\n    this.setState(({plates: plates+1}), this.reset)\n  };\n\n  popPlate = () => {\n    const {plates} = this.state;\n    if (plates <= 1) return;\n    this.setState(({plates: plates-1}), this.reset)\n  };\n\n  handleClick = (i) => {\n    const {towers, selected, moves, solved} = this.state;\n    if (solved) return;\n    if (selected === i) {\n      this.setState({selected: null});\n    } else if (selected !== null) {\n      const newTowers = hanoi.move(towers, [selected, i]);\n      if (_.isEqual(newTowers, towers)) {\n        this.setState({selected: null});\n        return null;\n      }\n      this.setState({\n        towers: newTowers,\n        selected: null,\n        moves: moves + 1,\n        solved: hanoi.isSolved(newTowers)\n      });\n    } else { \n      this.setState({selected: i});\n    }\n  };\n\n  render() {\n    const {selected, moves, solved} = this.state;\n    return (\n      <React.Fragment>\n        <nav className=\"level\">\n          <div className=\"level-item has-text-centered\">\n            <h1 className=\"title\">Tower of Hanoi</h1>\n          </div>\n          <div className=\"level-item has-text-centered\">\n            <div>\n              <p className=\"heading\">Size</p>\n              <p className=\"title noselect\">\n                <span onClick={this.popPlate}>\n                  <i className=\"fas fa-angle-left\"></i>\n                </span>\n                {this.state.plates}\n                <span onClick={this.addPlate}>\n                  <i className=\"fas fa-angle-right\"></i>\n                </span>\n              </p>\n            </div>\n          </div>\n          <div className=\"level-item has-text-centered\">\n            <div>\n              <p className=\"heading\">Moves</p>\n              <p className=\"title\">{moves}</p>\n            </div>\n          </div>\n          <div className=\"level-item has-text-centered\">\n            <div>\n              <p className=\"heading\">Solved</p>\n              <p className=\"title\">\n                {solved && <span><i className=\"fas fa-check\"></i></span>}\n                {!solved && <span><i className=\"fas fa-times\"></i></span>}\n              </p>\n            </div>\n          </div>\n          <div className=\"level-item has-text-centered\">\n            <button className=\"button is-primary\" onClick={this.reset} disabled={moves === 0}>Start Over</button>\n          </div>\n        </nav>\n        <div className=\"HanoiTowers\">\n          {this.state.towers.map((tower, idx) => \n            <Tower \n              key={idx} \n              plates={tower} \n              onClick={() => this.handleClick(idx)}\n              selected={selected === idx}\n            />)\n          }\n        </div>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default HanoiTowers;\n","import React from 'react';\nimport HanoiTowers from './HanoiTowers';\n\nfunction App() {\n  return (\n    <section className=\"section\">\n      <div className=\"App container\">\n        <HanoiTowers />\n      </div>\n    </section>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bulma/css/bulma.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}